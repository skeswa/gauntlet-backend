package org.gauntlet.quizzes.rest;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.IOUtils;
import org.gauntlet.core.api.ApplicationException;
import org.gauntlet.core.api.dao.NoSuchModelException;
import org.gauntlet.quizzes.api.dao.IQuizDAOService;
import org.gauntlet.quizzes.api.model.Quiz;
import org.gauntlet.quizzes.api.model.QuizType;
import org.gauntlet.quizzes.api.model.ProblemDifficulty;
import org.gauntlet.quizzes.api.model.ProblemPicture;
import org.gauntlet.quizzes.api.model.ProblemSource;
import org.osgi.service.log.LogService;


@Path("quizzes")
public class QuizResource {
	private volatile LogService logger;
	private volatile IQuizDAOService quizService;
	
	/**
	 * 
	 * ========= Quizzes
	 */
	@GET
    @Produces(MediaType.APPLICATION_JSON)
	@Path("all/quiztype/{quizType}/{start}/{end}")
    public List<Quiz> listProducts(@PathParam("quizType") long quizType, @PathParam("start") int start, @PathParam("end") int end ) throws ApplicationException {
		return quizService.findByQuizType(quizType,start,end);
    }
	@GET
    @Produces(MediaType.APPLICATION_JSON)
	@Path("all/{start}/{end}")
    public List<Quiz> all(@PathParam("start") int start, @PathParam("end") int end) throws ApplicationException {
		return quizService.findAll(start, end);
    }	
	
    @GET 
    @Path("{quizId}") 
    @Produces(MediaType.APPLICATION_JSON) 
    public Quiz getProblem(@PathParam("quizId") long quizId) throws NoSuchModelException, ApplicationException {
		return quizService.getByPrimary(quizId);
    }
    
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	public void updateProblem(Quiz quiz) throws ApplicationException {
		quizService.update(quiz);
	}

	@DELETE
	@Path("{quizId}")
	public void delete(@PathParam("quizId") long quizId) throws NoSuchModelException, ApplicationException {
		quizService.delete(quizId);
	}
	
    
    @POST 
    @Path("/provide") 
    @Consumes(MediaType.MULTIPART_FORM_DATA) 
    @Produces(MediaType.APPLICATION_JSON) 
    public Quiz provide(@Context HttpServletRequest request) throws IOException, ApplicationException { 
    	Quiz newProblem = null;
    			
    	String answer = null;
		Integer sourcePageNumber = null;
		Integer sourceIndexWithinPage = null;
		Boolean multipleChoice = null;
		Boolean requiresCalculator = null;
		Long sourceId = null;
		Long categoryId = null;
		Long difficultyId = null;
		ProblemPicture answerPicture = null;
		ProblemPicture questionPicture = null;
		
		Map<String,FileItem> map = new HashMap<>();
        ServletFileUpload uploader = new ServletFileUpload(new DiskFileItemFactory());
        try {
            List<FileItem> parseRequest = uploader.parseRequest(request);
            for (FileItem fileItem : parseRequest) {
                if (fileItem.isFormField() || fileItem instanceof DiskFileItem) {
                	String fieldName = fileItem.getFieldName();
                	map.put(fieldName, fileItem);
                }

            }
            answer = map.get("answer").getString();
            sourcePageNumber = Integer.valueOf(map.get("sourcePageNumber").getString());
            sourceIndexWithinPage = Integer.valueOf(map.get("sourceIndexWithinPage").getString());
            multipleChoice = Boolean.valueOf(map.get("sourceIndexWithinPage").getString());
            requiresCalculator = Boolean.valueOf(map.get("requiresCalculator").getString());
            sourceId = Long.valueOf(map.get("sourceId").getString());
            categoryId = Long.valueOf(map.get("categoryId").getString());
            difficultyId = Long.valueOf(map.get("difficultyId").getString());
            
            answerPicture = convertFileItemtoProblemPicture((DiskFileItem) map.get("answerPicture"));
            questionPicture = convertFileItemtoProblemPicture((DiskFileItem) map.get("questionPicture"));
            
            ProblemSource ps = quizService.getProblemSourceByPrimary(sourceId);
            QuizType pc = quizService.getProblemCategoryByPrimary(categoryId);
            ProblemDifficulty pd = quizService.getProblemDifficultyByPrimary(difficultyId);
            
            
        	newProblem = new Quiz(
					answer,
					ps,//source, 
					pc,//category, 
					sourcePageNumber,
					sourceIndexWithinPage, 
					pd,//ProblemDifficulty difficulty, 
					answerPicture,//byte[] answerPicture, 
					questionPicture,//byte[] questionPicture,
					multipleChoice,
					requiresCalculator);
	
			newProblem = quizService.provide(newProblem);
        } catch (FileUploadException e) {
            throw new ApplicationException(e);
        } catch (NoSuchModelException e) {
        	throw new ApplicationException(e);
		} catch (Exception e) {
        	throw new ApplicationException(e);
		}
    	
        return newProblem; 
    }     
    
    private ProblemPicture convertFileItemtoProblemPicture(DiskFileItem fi) throws Exception {
    	byte[] content = null;
    	ProblemPicture pp = null;
		try {
			if (fi.isInMemory()) {
				InputStream is = null;
				try {
					is = fi.getInputStream();
					content = IOUtils.toByteArray(is);
				} finally {
					if (is != null)
						is.close();
				}
			} else {
				File file = File.createTempFile(fi.getFieldName(), "tmp");
				fi.write(file);
				file.deleteOnExit();

				content = Files.readAllBytes(Paths.get(file.getAbsolutePath()));
			}
			String ct = fi.getContentType();
			long cs = fi.getSize();
			String fileName = ((FileItem) fi).getName();
			pp = new ProblemPicture(fileName, fileName, content, ct, cs);
		} finally {
			((FileItem) fi).delete();
		}
		return pp;
    }
    
    public byte[] readImageOldWay(File file) throws IOException
    {
      InputStream is = new FileInputStream(file);
      // Get the size of the file
      long length = file.length();
      // You cannot create an array using a long type.
      // It needs to be an int type.
      // Before converting to an int type, check
      // to ensure that file is not larger than Integer.MAX_VALUE.
      if (length > Integer.MAX_VALUE)
      {
        // File is too large
      }
      // Create the byte array to hold the data
      byte[] bytes = new byte[(int) length];
      // Read in the bytes
      int offset = 0;
      int numRead = 0;
      while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0)
      {
        offset += numRead;
      }
      // Ensure all the bytes have been read in
      if (offset < bytes.length)
      {
        throw new IOException("Could not completely read file " + file.getName());
      }
      // Close the input stream and return bytes
      is.close();
      return bytes;
    }    

	/**
	 * 
	 * ========= Problem cats
	 */
	@GET
    @Produces(MediaType.APPLICATION_JSON)
	@Path("quiztypes/all/{start}/{end}")
    public List<QuizType> allCategories(@PathParam("start") int start, @PathParam("end") int end) throws ApplicationException {
		return quizService.findAllQuizTypes(start, end);
    }	
	
	@GET
    @Produces(MediaType.APPLICATION_JSON)
	@Path("quiztypes/count")
    public long countCategories() throws ApplicationException {
		return quizService.countAllProblemCategories();
    }	
	
    @GET 
    @Path("quiztypes/{quizTypeId}") 
    @Produces(MediaType.APPLICATION_JSON) 
    public QuizType getProblemCategory(@PathParam("quizTypeId") long quizTypeId) throws NoSuchModelException, ApplicationException {
		return quizService.getQuizTypeByPrimary(quizTypeId);
    }
    
	@POST
	@Path("quiztypes/provide")
	@Consumes(MediaType.APPLICATION_JSON)
	public void provideProblemCategory(QuizType quizType) throws ApplicationException {
		quizService.provideQuizType(quizType);
	}

	@DELETE
	@Path("quiztypes/{quizTypeId}")
	public void deleteProbleCategory(@PathParam("quizTypeId") long quizTypeId) throws NoSuchModelException, ApplicationException {
		quizService.deleteQuizType(quizTypeId);
	}	
}
