package org.gauntlet.problems.dao.impl;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

import org.amdatu.jta.Transactional;
import org.gauntlet.core.api.ApplicationException;
import org.gauntlet.core.commons.util.Validator;
import org.osgi.service.log.LogService;
import org.gauntlet.problems.api.dao.IProblemDAOService;
import org.gauntlet.problems.api.model.Problem;
import org.gauntlet.problems.model.jpa.JPAProblem;


@SuppressWarnings("restriction")
@Transactional
public class ProblemDAOImpl extends BaseDAOImpl<Problem> implements IProblemDAOService {
	
	private volatile LogService logger;
	
	private volatile EntityManager em;
	
	@Override
	public LogService getLogger() {
		return logger;
	}

	public void setLogger(LogService logger) {
		this.logger = logger;
	}

	@Override
	public EntityManager getEm() {
		return em;
	}	


	@Override
	public Problem provide(Problem record)
			  throws ApplicationException {
		Problem existing = getByCode(record.getCode());
		if (Validator.isNull(existing))
		{
			existing = add(record);
		}
		return existing;
	}
	
	@Override
	public Problem getByCode(String code) throws ApplicationException {
		return super.findWithAttribute(Problem.class, String.class,"code", code);
	}


	@Override
	public Problem getByName(String name) throws ApplicationException {
		return super.findWithAttribute(Problem.class, String.class,"name", name);
	}
	
	@Override 
	public List<Problem> findByDifficulty(Long difficultyId, int start, int end) {
		 List<Problem> recs = null;
            try {
                    TypedQuery<JPAProblem> query = getEm().createQuery("select o from JPAProblem o  where o.difficulty.id = :difficultyId order by o.id", JPAProblem.class);
                    query.setParameter("tenantId", difficultyId);

                    recs = query.getResultList()
            } catch (NoResultException e) {
            } catch (Exception e) {
                    StringWriter sw = new StringWriter();
                    e.printStackTrace(new PrintWriter(sw));
                    String stacktrace = sw.toString();
                    logger.log(LogService.LOG_ERROR,stacktrace);
            } catch (Error e) {
                    StringWriter sw = new StringWriter();
                    e.printStackTrace(new PrintWriter(sw));
                    String stacktrace = sw.toString();
                    logger.log(LogService.LOG_ERROR,stacktrace);
            }

            return recs;
	}
}